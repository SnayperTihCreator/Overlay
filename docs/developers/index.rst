Разработка
==========

`Главная <../README.md>`_

Сборка под свою ОСь
-------------------

Для разработки или нужно скачать сам репозиторий
Дальше установить менеджер проекта uv:

- pip install uv
- Либо смотрите в `официальную документацию <https://docs.astral.sh/uv/>`_

Потом в корне проекта в терминале вызываете

.. code-block:: bash

   uv sync

После установки всего можно разрабатывать

.. note::
   Мой совет после установки рекомендуется для не кроссплатформенных пакетов лучше указывать для какой они системе

Сборка
------

Вы можете конечно сами выбирать как и что собирать
Но настоятельно рекомендую использовать:

- на Unix подобных

  .. code-block:: bash

     source ./build.cmd

- на Windows(NT)

  .. code-block:: shell

     .\build.cmd

В нем уже все настроено и готовое приложение будет находится в корневой папке с именем Overlay

.. note::
   Расширение зависит от системы
   В Alt gnome linux у меня его нет
   В Windows будет exe

Описание
--------

Для создания плагинов будет нужен OverlayTools, чтобы папку с нужной структурой для упаковки в сам плагин, а потом в пакет

Код создания плагина окна:

.. code-block:: bash

   ./OverlayTools create plugin <ИмяПлагина> <Корневая папка куда будет создоватся папка плагина> --window[-wn]

Код создания плагина виджета:

.. code-block:: bash

   ./OverlayTools create plugin <ИмяПлагина> <Корневая папка куда будет создоватся папка плагина> --widget[-wg]

Наличие обоих флагов не выдает также, как и остуствие их обоих. При налочие обоих флагов будут созданные конструкции обоих типов виджетов, но при импорте они будут отображатся 2 разных плагинах.

.. image:: image/image.png
   :alt: Фото разных типов плагинов

Отстутвие обоих флагов создасть просто пустую загрузучной файл для плагина который нужно будет самому прописовать

Собственно разработка
---------------------

Общие системы настроки :doc:`APIBaseWidget <core>`

Разработка для окон :doc:`OWindow <owindow>`
Разработка для виджетов :doc:`OWidget <owidget>`

Дополнения
----------

Включение подержки выполения через OverlayCLI :doc:`CLInterface <cliterface>`

Индекс рекомендуемых API для использования :doc:`../api`